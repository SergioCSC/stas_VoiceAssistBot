1) How to fix all dependencies:  pip freeze > .\requirements_1.txt

2) 15.04.2023 19:16
openai.error.RateLimitError: You exceeded your current quota, please check your plan and billing details.

3) 16.04.2023
We pass FFMPEG_BINARY as the first argument to the subprocess.run() command, and then we pass
the rest of the ffmpeg command arguments as a command list.

Run command to convert audio
command = ["ffmpeg", "-i", "input.mp3", "output.wav"]
subprocess.run(command, check=True)

Running a command to extract audio from a video
command = ["ffmpeg", "-i", "input.mp4", "-vn", "-acodec", "copy", "output.m4a"]
subprocess.run(command, check=True)

4) 18.04.2023
async def send_echo(message: Message, bot: Bot):
    try:
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        await message.reply(text=f"file info \n {file_id}")
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "some_file.mp3")

async def send_echo(message: Message, bot: Bot): - implicitly, the framework passes the bot to the handler.
Thus it is possible use bot methods. Saved transferred audio files to disk

5) 19.04.2023
ADD second version func for download sound with read binaryIO and save to bytes in memory
async def process_download_audio(message: Message, bot: Bot):

Finish create func "convert_audio_to_mp3" and upgrade handler "process_audio_to_text"

To speed up the speed of audio playback in the FFmpeg command, you can use the "-filter:a" option
and specify "atempo" filter with speed factor ["-filter:a", f"atempo={speed}"], for example speed=1.5

Set a different bitrate, you can add the option "-b:a" (or "-ab") specifying the desired bitrate in kilobits per second
["-b:a", "192k"]

6) 20.04.2023
command = [FFMPEG_BINARY, "-i", "pipe:", "-b:a", "33k", "-filter:a", f"atempo={speed}", "pipe:"]
in the command parameters, we replaced path_input and path_output with "pipe:", which indicates input and output data
via stdin and stdout. We pass data to stdin via input and get the result via a BytesIO object to stdout.
result = output_data

Using subprocess.PIPE is a common approach when working with subprocesses, as it allows you to
capture the output of the subprocess in a way that is compatible with any platform or operating system.

By default, the run function returns the result of the command to the standard output stream.
If you want to get the result of the command, you need to add the stdout argument and set it to subprocess.PIPE:
In [9]: result = subprocess.run(['ls', '-ls'], stdout=subprocess.PIPE)
Now you can get the result of running the command like this:
In [10]: print(result.stdout)


In order to send a file, a special FSInputFile wrapper is used in aiogram for local files:
from aiogram.types.input_file import FSInputFile
document = FSInputFile('otchet.txt')
await bot.send_document(chatid, document)


Create func for text request to Open_AI:
def text_request_to_open_ai(text: str = "Hello!"):
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": f" 'Some specific param.': {text}"}])
    return completion.choices[0].message["content"]


Convert function now supports binary input and output

7) 21.04.2023
change func "transcribe_audio_to_text"
transcript = openai.Audio.transcribe_raw("whisper-1", file_bytes, "some_file.mp3")
If we want get to AI raw bytes

Create func for delete temp files
delete_temp_files(path: str = "temp")

Now func "convert_audio_to_mp3" work correct with "aac" format and return "bytes"

Create "temp" folder. Now all temp files to delete at the end

Add delete alert message after successful transcribe

Add path for ffmpeg in config.py


The first line ignores all files and folders in the project's root directory, except for the .gitignore file,
 so that this file is included in Git. The second line includes the "tmp" folder in the Git version control system.
  This way, if you create an empty "tmp" folder in your project's root directory, it will be included in Git.
/*
!/.gitignore
!/tmp/

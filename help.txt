1) How to fix all dependencies:  pip freeze > .\requirements_1.txt

2) 15.04.2023 19:16
openai.error.RateLimitError: You exceeded your current quota, please check your plan and billing details.

3) 16.04.2023
We pass FFMPEG_BINARY as the first argument to the subprocess.run() command, and then we pass
the rest of the ffmpeg command arguments as a command list.

Run command to convert audio
command = ["ffmpeg", "-i", "input.mp3", "output.wav"]
subprocess.run(command, check=True)

Running a command to extract audio from a video
command = ["ffmpeg", "-i", "input.mp4", "-vn", "-acodec", "copy", "output.m4a"]
subprocess.run(command, check=True)

4) 18.04.2023
async def send_echo(message: Message, bot: Bot):
    try:
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        await message.reply(text=f"file info \n {file_id}")
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "some_file.mp3")

async def send_echo(message: Message, bot: Bot): - implicitly, the framework passes the bot to the handler.
Thus it is possible use bot methods. Saved transferred audio files to disk

5) 19.04.2023
ADD second version func for download sound with read binaryIO and save to bytes in memory
async def process_download_audio(message: Message, bot: Bot):

Finish create func "convert_audio_to_mp3" and upgrade handler "process_audio_to_text"

To speed up the speed of audio playback in the FFmpeg command, you can use the "-filter:a" option
and specify "atempo" filter with speed factor ["-filter:a", f"atempo={speed}"], for example speed=1.5

Set a different bitrate, you can add the option "-b:a" (or "-ab") specifying the desired bitrate in kilobits per second
["-b:a", "192k"]

